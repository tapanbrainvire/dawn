<style>
  .tp-custom-collection-container{
    display: flex;
    flex-flow: row wrap;
    margin: 0 10%;
}
  .tp-custom-filters {
    width: 15%;
}
  #product-list{
    display: flex;
    flex-flow: row wrap;
    justify-content: space-between;
    align-items: center;
    width:85%;
}
  
  .product-item {
    width: 22%;
}
  .product-item img{
    width:100%;
  }
.product-item h2{
    font-size: 15px;
    font-weight: bold;
}
</style>

<div class="tp-custom-collection-container">
  <div class="tp-custom-filters">
    <!-- Filter by Tags -->
    <div class="tp-filter-option-tags">
      <h3>Filter by Tags</h3>
      <ul id="product-tag-filter">
        {% assign tags = collections[collection.handle].all_tags %}
        {% for tag in tags %}
          <li>
            <label>
              <input type="checkbox" class="filter-tag" value="{{ tag }}">
              {{ tag }}
            </label>
          </li>
        {% endfor %}
      </ul>
    </div>
  </div>
  <div id="product-list"></div>


  {% comment %}
  {% for product in collections[collection.handle].products %}
  <div class="product-item">
    <img src="{{ product.featured_image | img_url: 'master' }}" />
    <h2>{{ product.title }}</h2>
    <p>{{ product.price | money }}</p>
    <a href="{{ product.url }}">View Product</a>
  </div>
{% endfor %}
  {% endcomment %}

  
</div>

{% schema %}
{
  "name": "Custom Product Grid",
  "class": "section",
  "settings": [
  ]
}
{% endschema %}

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>  
$(document).ready(function () {
    var collection_product_array = [];
	$.ajax({
		type: 'GET',
		url: '/collections/{{ collection.handle }}/products.json?limit=250',
		success: function (cresponse) {
			console.log(cresponse);
            const products = cresponse.products;
            displayProducts(products); 
          
			$.each(products, function (i) {
                console.log('inside loop');
				var cdata = {};
				var tags = cresponse.products[i].tags;
				cdata.tags = tags.toLowerCase();

				collection_product_array.push(cdata);
            });

            console.log('array tags',collection_product_array);

          
			// $('input[name="inhd_header_search"]').keyup(function () {
			// 	$('.search__suggest-list').empty();
			// 	var search_value = $(this).val();
			// 	var carray_count = 0;
			// 	//  console.log(search_value);

			// 	$.each(collection_array, function (i) {
			// 		if (collection_array[i].title.includes(search_value)) {
			// 			$('.search__suggest-list').append('<li class="search__suggest-list__item"><a href="collections/' + collection_array[i].handle + '">' + collection_array[i].title + '</a></li>');
			// 			carray_count++;
			// 		}
			// 	});

			// 	if (carray_count == 0) {
			// 		$('.search__suggest-list').empty();
			// 		$('.search__suggest-list').append('<li class="search__suggest-list__item">No Result</li>');
			// 	}
			// });
		},
		error: function (error) {
			console.log("test" + JSON.stringify(error))
			console.log("This Error: " + error);
		}
	});
  
  
	// var product_array = [];
	// $.ajax({
	// 	type: 'GET',
	// 	url: '/products.json?limit=250&page=1',
	// 	success: function (response) {
 //         // console.log(response);
	// 		$.each(response.products, function (i) {
	// 			var data = {};
	// 			var handle = response.products[i].handle;
	// 			var title = response.products[i].title;
	// 			var src = response.products[i].images[0].src;
	// 			var price = response.products[i].variants[0].price;

	// 			data.handle = handle;
	// 			data.title = title.toLowerCase();
	// 			data.src = src;
	// 			data.price = price;
	// 			product_array.push(data);

	// 		});
	// 		$('input[name="inhd_header_search"]').keyup(function () {
	// 			$('.search-product__grid').empty();
	// 			var search_value = $(this).val();

	// 			var parray_count = 0;
	// 			$.each(product_array, function (i) {
	// 				if (product_array[i].title.includes(search_value)) {
	// 					$('.search-product__grid').append('<div class="search-product"><div class="search-product__figure"><a href="/products/' + product_array[i].handle + '"><img class="lazy entered loaded" data-src="' + product_array[i].src + '" alt="' + product_array[i].title + '" data-ll-status="loaded" src="' + product_array[i].src + '"></a></div><div class="search-product__caption"><h6 class="search-product__title">' + product_array[i].title + '<br>$' + product_array[i].price + '</h6></div></div>');
	// 					parray_count++;
	// 				}
	// 			});

	// 			if (parray_count == 0) {
	// 				$('.search-product__grid').empty();
	// 				$('.search-product__grid').append('<div class="search-product">No Result</div>');
	// 			}

	// 		});
	// 	},
	// 	error: function (error) {
	// 		console.log("test" + JSON.stringify(error))
	// 		console.log("This Error: " + error);
	// 	}
 //      }); 
	
});  

// Function to display products on the page
  function displayProducts(products) {
    const productContainer = document.getElementById('product-list');
    productContainer.innerHTML = ''; // Clear previous products

    products.forEach(product => {
      const productHTML = `
        <div class="product-item">
          <img src="${product.images[0].src}" alt="${product.title}" />
          <h2>${product.title}</h2>
          <p>${product.variants[0].price}</p>
          <a href="/products/${product.handle}">View Product</a>
        </div>
      `;
      productContainer.innerHTML += productHTML;
    });
  }  
</script>

{% comment %}


<script>
  // Function to fetch all products from a specific collection
  function fetchProductsByCollection() {
    const apiUrl = '/collections/{{ collection.handle }}/products.json';

    // Make AJAX request to fetch products
    fetch(apiUrl)
      .then(response => response.json())
      .then(data => {
        const products = data.products;
        displayProducts(products.slice(0, 9)); // Display only the first 9 products
      })
      .catch(error => {
        console.error('Error fetching products:', error);
      });
  }

  // Function to display products on the page
  function displayProducts(products) {
    const productContainer = document.getElementById('product-list');
    productContainer.innerHTML = ''; // Clear previous products

    products.forEach(product => {
      const productHTML = `
        <div class="product-item">
          <img src="${product.images[0].src}" alt="${product.title}" />
          <h2>${product.title}</h2>
          <p>${product.variants[0].price}</p>
          <a href="/products/${product.handle}">View Product</a>
        </div>
      `;
      productContainer.innerHTML += productHTML;
    });
  }

  // Call the function with your desired collection handle
  fetchProductsByCollection(); // Replace with your collection handle


    // Event listener for checkbox changes
  document.querySelectorAll('.filter-tag').forEach(checkbox => {
    checkbox.addEventListener('change', function() {
      const selectedTags = Array.from(document.querySelectorAll('.filter-tag:checked')).map(input => input.value);
      if (selectedTags.length > 0) {
        fetchProductsByTags(selectedTags); // Call the function with selected tags
      } else {
        document.getElementById('product-list').innerHTML = ''; // Clear products if no tags are selected
      }
    });
  });

  // Function to fetch products based on selected tag
  function fetchProductsByTags(selectedTags) {
    //const apiUrl = '/collections/{{ collection.handle }}/products.json?tag='+selectedTags; // Fetch products based on the selected tag
    // const apiUrl = '/collections/{{ collection.handle }}/'+selectedTags;
    // console.log('url',apiUrl);

    // // Make AJAX request to fetch products based on the selected tag
    // fetch(apiUrl)
    //   .then(response => response.json())
    //   .then(data => {
        
    //     const products = data.products;
    //     console.log('products',products);
    //     displayProducts(products);
    //   })
    //   .catch(error => {
    //     console.error('Error fetching products:', error);
    //   });
    fetch(window.Shopify.routes.root + "search/suggest.json?q="+selectedTags+"&resources[type]=product&resources[options][fields]=tag")
      .then((response) => response.json())
      .then((suggestions) => {
        console.log('suggestions',suggestions);
        const productSuggestions = suggestions.resources.results.products;
        console.log('products',productSuggestions);
        if (productSuggestions.length > 0) {
          const firstProductSuggestion = productSuggestions[0];
    
          
        }
      }
    );
    
  }
</script>

{% endcomment %}